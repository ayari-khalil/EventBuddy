package dev.flonixa.com.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GridColumnAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridColumnAllPropertiesEquals(GridColumn expected, GridColumn actual) {
        assertGridColumnAutoGeneratedPropertiesEquals(expected, actual);
        assertGridColumnAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridColumnAllUpdatablePropertiesEquals(GridColumn expected, GridColumn actual) {
        assertGridColumnUpdatableFieldsEquals(expected, actual);
        assertGridColumnUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridColumnAutoGeneratedPropertiesEquals(GridColumn expected, GridColumn actual) {
        assertThat(actual)
            .as("Verify GridColumn auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridColumnUpdatableFieldsEquals(GridColumn expected, GridColumn actual) {
        assertThat(actual)
            .as("Verify GridColumn relevant properties")
            .satisfies(a -> assertThat(a.getDataField()).as("check dataField").isEqualTo(expected.getDataField()))
            .satisfies(a -> assertThat(a.getCaption()).as("check caption").isEqualTo(expected.getCaption()))
            .satisfies(a -> assertThat(a.getVisible()).as("check visible").isEqualTo(expected.getVisible()))
            .satisfies(a -> assertThat(a.getDataType()).as("check dataType").isEqualTo(expected.getDataType()))
            .satisfies(a -> assertThat(a.getFormat()).as("check format").isEqualTo(expected.getFormat()))
            .satisfies(a -> assertThat(a.getWidth()).as("check width").isEqualTo(expected.getWidth()))
            .satisfies(a -> assertThat(a.getAllowSorting()).as("check allowSorting").isEqualTo(expected.getAllowSorting()))
            .satisfies(a -> assertThat(a.getAllowFiltering()).as("check allowFiltering").isEqualTo(expected.getAllowFiltering()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridColumnUpdatableRelationshipsEquals(GridColumn expected, GridColumn actual) {
        assertThat(actual)
            .as("Verify GridColumn relationships")
            .satisfies(a -> assertThat(a.getGridConfiguration()).as("check gridConfiguration").isEqualTo(expected.getGridConfiguration()));
    }
}
