package dev.flonixa.com.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GridConfigurationAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridConfigurationAllPropertiesEquals(GridConfiguration expected, GridConfiguration actual) {
        assertGridConfigurationAutoGeneratedPropertiesEquals(expected, actual);
        assertGridConfigurationAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridConfigurationAllUpdatablePropertiesEquals(GridConfiguration expected, GridConfiguration actual) {
        assertGridConfigurationUpdatableFieldsEquals(expected, actual);
        assertGridConfigurationUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridConfigurationAutoGeneratedPropertiesEquals(GridConfiguration expected, GridConfiguration actual) {
        assertThat(actual)
            .as("Verify GridConfiguration auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridConfigurationUpdatableFieldsEquals(GridConfiguration expected, GridConfiguration actual) {
        assertThat(actual)
            .as("Verify GridConfiguration relevant properties")
            .satisfies(a -> assertThat(a.getGridName()).as("check gridName").isEqualTo(expected.getGridName()))
            .satisfies(a -> assertThat(a.getPageSize()).as("check pageSize").isEqualTo(expected.getPageSize()))
            .satisfies(a ->
                assertThat(a.getPagerAllowedPageSizes()).as("check pagerAllowedPageSizes").isEqualTo(expected.getPagerAllowedPageSizes())
            )
            .satisfies(a ->
                assertThat(a.getPagerShowPageSizeSelector())
                    .as("check pagerShowPageSizeSelector")
                    .isEqualTo(expected.getPagerShowPageSizeSelector())
            )
            .satisfies(a ->
                assertThat(a.getPagerShowNavigationButtons())
                    .as("check pagerShowNavigationButtons")
                    .isEqualTo(expected.getPagerShowNavigationButtons())
            )
            .satisfies(a -> assertThat(a.getAllowSorting()).as("check allowSorting").isEqualTo(expected.getAllowSorting()))
            .satisfies(a -> assertThat(a.getSortingMode()).as("check sortingMode").isEqualTo(expected.getSortingMode()))
            .satisfies(a -> assertThat(a.getAllowFiltering()).as("check allowFiltering").isEqualTo(expected.getAllowFiltering()))
            .satisfies(a -> assertThat(a.getFilterRowVisible()).as("check filterRowVisible").isEqualTo(expected.getFilterRowVisible()))
            .satisfies(a ->
                assertThat(a.getHeaderFilterVisible()).as("check headerFilterVisible").isEqualTo(expected.getHeaderFilterVisible())
            )
            .satisfies(a -> assertThat(a.getAllowSearch()).as("check allowSearch").isEqualTo(expected.getAllowSearch()))
            .satisfies(a -> assertThat(a.getSearchPanelVisible()).as("check searchPanelVisible").isEqualTo(expected.getSearchPanelVisible())
            )
            .satisfies(a -> assertThat(a.getSearchPanelWidth()).as("check searchPanelWidth").isEqualTo(expected.getSearchPanelWidth()))
            .satisfies(a ->
                assertThat(a.getSearchPanelPlaceholder()).as("check searchPanelPlaceholder").isEqualTo(expected.getSearchPanelPlaceholder())
            )
            .satisfies(a -> assertThat(a.getAllowColumnChooser()).as("check allowColumnChooser").isEqualTo(expected.getAllowColumnChooser())
            )
            .satisfies(a ->
                assertThat(a.getColumnChooserEnabled()).as("check columnChooserEnabled").isEqualTo(expected.getColumnChooserEnabled())
            )
            .satisfies(a ->
                assertThat(a.getColumnHidingEnabled()).as("check columnHidingEnabled").isEqualTo(expected.getColumnHidingEnabled())
            )
            .satisfies(a -> assertThat(a.getAllowExport()).as("check allowExport").isEqualTo(expected.getAllowExport()))
            .satisfies(a -> assertThat(a.getExportEnabled()).as("check exportEnabled").isEqualTo(expected.getExportEnabled()))
            .satisfies(a -> assertThat(a.getExportFileName()).as("check exportFileName").isEqualTo(expected.getExportFileName()))
            .satisfies(a -> assertThat(a.getAllowGrouping()).as("check allowGrouping").isEqualTo(expected.getAllowGrouping()))
            .satisfies(a -> assertThat(a.getGroupPanelVisible()).as("check groupPanelVisible").isEqualTo(expected.getGroupPanelVisible()))
            .satisfies(a ->
                assertThat(a.getAllowColumnReordering()).as("check allowColumnReordering").isEqualTo(expected.getAllowColumnReordering())
            )
            .satisfies(a ->
                assertThat(a.getAllowColumnResizing()).as("check allowColumnResizing").isEqualTo(expected.getAllowColumnResizing())
            )
            .satisfies(a -> assertThat(a.getSelectionMode()).as("check selectionMode").isEqualTo(expected.getSelectionMode()))
            .satisfies(a ->
                assertThat(a.getSelectionAllowSelectAll())
                    .as("check selectionAllowSelectAll")
                    .isEqualTo(expected.getSelectionAllowSelectAll())
            )
            .satisfies(a ->
                assertThat(a.getSelectionShowCheckBoxesMode())
                    .as("check selectionShowCheckBoxesMode")
                    .isEqualTo(expected.getSelectionShowCheckBoxesMode())
            )
            .satisfies(a -> assertThat(a.getEditingMode()).as("check editingMode").isEqualTo(expected.getEditingMode()))
            .satisfies(a -> assertThat(a.getEditingAllowAdding()).as("check editingAllowAdding").isEqualTo(expected.getEditingAllowAdding())
            )
            .satisfies(a ->
                assertThat(a.getEditingAllowUpdating()).as("check editingAllowUpdating").isEqualTo(expected.getEditingAllowUpdating())
            )
            .satisfies(a ->
                assertThat(a.getEditingAllowDeleting()).as("check editingAllowDeleting").isEqualTo(expected.getEditingAllowDeleting())
            )
            .satisfies(a -> assertThat(a.getCreatedDate()).as("check createdDate").isEqualTo(expected.getCreatedDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGridConfigurationUpdatableRelationshipsEquals(GridConfiguration expected, GridConfiguration actual) {
        // empty method
    }
}
