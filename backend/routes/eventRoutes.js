import express from "express";
import * as eventController from "../controllers/eventController.js";
import { GoogleGenerativeAI } from "@google/generative-ai";

const router = express.Router();

// üîç DEBUG: V√©rifier la cl√© API au d√©marrage
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
console.log("üîë V√©rification de la cl√© Gemini API:");
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
if (process.env.GEMINI_API_KEY) {
  const keyPreview = process.env.GEMINI_API_KEY.substring(0, 8) + "..." + 
                     process.env.GEMINI_API_KEY.substring(process.env.GEMINI_API_KEY.length - 4);
  console.log(`‚úÖ Cl√© trouv√©e: ${keyPreview}`);
  console.log(`üìè Longueur: ${process.env.GEMINI_API_KEY.length} caract√®res`);
  console.log(`üî§ Commence par: ${process.env.GEMINI_API_KEY.substring(0, 4)}`);
} else {
  console.log("‚ùå ERREUR: GEMINI_API_KEY non trouv√©e dans process.env");
  console.log("‚ö†Ô∏è  V√©rifiez votre fichier .env");
}
console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

// Initialiser Gemini AI avec gestion d'erreur
let genAI;
try {
  if (!process.env.GEMINI_API_KEY) {
    throw new Error("GEMINI_API_KEY n'est pas d√©finie dans les variables d'environnement");
  }
  genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
  console.log("‚úÖ Gemini AI initialis√© avec succ√®s\n");
} catch (error) {
  console.error("‚ùå Erreur lors de l'initialisation de Gemini AI:", error.message);
  console.error("‚ö†Ô∏è  L'endpoint /ai-generate ne fonctionnera pas\n");
}

// Routes CRUD standards
router.post("/", eventController.createEvent);
router.get("/", eventController.getAllEvents);
router.get("/:id", eventController.getEventById);
router.put("/:id", eventController.updateEvent);
router.delete("/:id", eventController.deleteEvent);
router.get("/count/total", eventController.countEvents);

// ==========================================
// ROUTE: G√©n√©rer un √©v√©nement avec l'IA
// ==========================================
router.post('/ai-generate', async (req, res) => {
  try {
    // V√©rifier que Gemini AI est initialis√©
    if (!genAI) {
      return res.status(503).json({ 
        error: 'Service IA non disponible',
        details: 'GEMINI_API_KEY non configur√©e. V√©rifiez votre fichier .env'
      });
    }

    const { prompt, userLocation, organizerName } = req.body;

    // Validation du prompt
    if (!prompt || prompt.trim().length === 0) {
      return res.status(400).json({ 
        error: 'Le prompt est requis et ne peut pas √™tre vide' 
      });
    }

    if (prompt.length > 2000) {
      return res.status(400).json({ 
        error: 'Le prompt est trop long (max 2000 caract√®res)' 
      });
    }

    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('ü§ñ G√âN√âRATION IA D√âMARR√âE');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`üìù Prompt: ${prompt.substring(0, 100)}...`);
    console.log(`üìç Lieu: ${userLocation || 'Non sp√©cifi√©'}`);
    console.log(`üë§ Organisateur: ${organizerName || 'Non sp√©cifi√©'}`);

    // Initialiser le mod√®le Gemini
    const model = genAI.getGenerativeModel({ model: 'gemini-pro' });

    // Cr√©er le prompt structur√© pour l'IA
    const structuredPrompt = `
Tu es un assistant IA expert en organisation d'√©v√©nements professionnels, conf√©rences, workshops et networking.

Contexte utilisateur:
- Localisation: ${userLocation || 'Non sp√©cifi√©e'}
- Organisation: ${organizerName || 'Non sp√©cifi√©'}

Description de l'√©v√©nement par l'utilisateur:
"${prompt}"

G√©n√®re un √©v√©nement complet et professionnel au format JSON suivant. Utilise les informations fournies par l'utilisateur et compl√®te intelligemment les champs manquants avec des suggestions pertinentes et r√©alistes:

{
  "title": "titre accrocheur et professionnel de l'√©v√©nement (max 100 caract√®res)",
  "description": "description d√©taill√©e et engageante de l'√©v√©nement (400-600 mots) qui inclut: objectifs, public cible, programme, intervenants potentiels, format, et b√©n√©fices pour les participants",
  "location": "lieu pr√©cis avec adresse ou nom de salle et ville (utilise ${userLocation} si appropri√©, sinon sugg√®re un lieu pertinent comme Station F Paris, Campus des Startups Lyon, etc.)",
  "date": "date au format YYYY-MM-DD (sugg√®re une date r√©aliste dans les 1-4 prochains mois)",
  "time": "horaire au format HH:MM - HH:MM (sugg√®re des heures pertinentes selon le type d'√©v√©nement)",
  "maxAttendees": "nombre de participants (entre 20 et 500, adapt√© au type d'√©v√©nement)",
  "category": "UNE SEULE cat√©gorie la plus pertinente parmi: tech, business, startup, ai",
  "price": "prix en format texte (exemples: Gratuit, 25‚Ç¨, 50‚Ç¨, 75‚Ç¨, 100‚Ç¨)",
  "organizer": "${organizerName || 'nom d\'organisation pertinent bas√© sur le type d\'√©v√©nement'}",
  "image": "URL d'image Unsplash R√âELLE et pertinente au th√®me (format: https://images.unsplash.com/photo-XXXXXXXXXX)",
  "tags": ["tag1", "tag2", "tag3", "tag4", "tag5"] (5-6 tags pertinents en fran√ßais),
  "difficulty": "UNE SEULE valeur parmi: D√©butant, Interm√©diaire, Avanc√©, Expert",
  "networking": "UNE SEULE valeur parmi: Faible, Mod√©r√©, √âlev√©, Tr√®s √©lev√©"
}

R√àGLES IMPORTANTES:
1. R√©ponds UNIQUEMENT avec le JSON valide, AUCUN texte avant ou apr√®s
2. Tous les champs doivent √™tre remplis avec des valeurs pertinentes
3. La description doit √™tre riche, professionnelle et engageante
4. Les tags doivent √™tre en fran√ßais et tr√®s pertinents au sujet
5. La date doit √™tre r√©aliste et dans le futur
6. L'URL d'image doit √™tre une vraie URL Unsplash valide
7. Le prix doit √™tre adapt√© au type et √† la qualit√© de l'√©v√©nement
`;

    // Appeler l'API Gemini avec gestion d'erreur am√©lior√©e
    console.log('üß† Envoi du prompt √† Gemini API...');
    
    let result;
    try {
      result = await model.generateContent({
        contents: [{ role: 'user', parts: [{ text: structuredPrompt }] }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 2048,
        },
      });
    } catch (apiError) {
      console.error('‚ùå Erreur API Gemini:', apiError);
      
      // Erreurs sp√©cifiques
      if (apiError.message?.includes('API_KEY_INVALID') || apiError.status === 400) {
        return res.status(401).json({ 
          error: 'Cl√© API Gemini invalide',
          details: 'Votre cl√© API n\'est pas valide. Veuillez la r√©g√©n√©rer sur https://aistudio.google.com/app/apikey',
          solution: 'Cr√©ez une nouvelle cl√© API et mettez √† jour votre fichier .env, puis red√©marrez le serveur'
        });
      }
      
      if (apiError.message?.includes('quota') || apiError.status === 429) {
        return res.status(429).json({ 
          error: 'Quota API d√©pass√©',
          details: 'Vous avez atteint la limite d\'utilisation de l\'API. R√©essayez plus tard.'
        });
      }

      throw apiError; // Relancer pour le catch g√©n√©ral
    }

    const response = await result.response;
    const text = response.text();
    
    console.log('‚úÖ R√©ponse re√ßue de Gemini');

    // Nettoyer la r√©ponse (enlever les backticks markdown si pr√©sents)
    let cleanedText = text.trim();
    
    if (cleanedText.startsWith('```json')) {
      cleanedText = cleanedText.replace(/```json\n?/g, '').replace(/```\n?$/g, '');
    } else if (cleanedText.startsWith('```')) {
      cleanedText = cleanedText.replace(/```\n?/g, '');
    }

    cleanedText = cleanedText.trim();

    // Parser le JSON
    let eventData;
    try {
      eventData = JSON.parse(cleanedText);
      console.log('‚úÖ JSON pars√© avec succ√®s');
    } catch (parseError) {
      console.error('‚ùå Erreur de parsing JSON:', parseError);
      console.error('üìÑ Texte re√ßu (premiers 500 caract√®res):', cleanedText.substring(0, 500));
      return res.status(500).json({ 
        error: 'Erreur lors du parsing de la r√©ponse IA',
        details: 'Le format de r√©ponse n\'est pas du JSON valide. R√©essayez.'
      });
    }

    // Valider les donn√©es essentielles
    const requiredFields = ['title', 'description', 'date', 'time', 'location'];
    const missingFields = requiredFields.filter(field => !eventData[field]);
    
    if (missingFields.length > 0) {
      console.error('‚ùå Champs manquants:', missingFields);
      return res.status(500).json({ 
        error: 'Donn√©es g√©n√©r√©es incompl√®tes',
        missingFields 
      });
    }

    // Valider et nettoyer les donn√©es
    eventData = {
      title: eventData.title?.substring(0, 200) || '',
      description: eventData.description || '',
      location: eventData.location || userLocation || '√Ä d√©finir',
      date: eventData.date || '',
      time: eventData.time || '09:00 - 17:00',
      maxAttendees: eventData.maxAttendees || '100',
      category: ['tech', 'business', 'startup', 'ai'].includes(eventData.category) 
        ? eventData.category 
        : 'tech',
      price: eventData.price || 'Gratuit',
      organizer: eventData.organizer || organizerName || 'Organisation',
      image: eventData.image || 'https://images.unsplash.com/photo-1540575467063-178a50c2df87',
      tags: Array.isArray(eventData.tags) ? eventData.tags.slice(0, 8) : [],
      difficulty: ['D√©butant', 'Interm√©diaire', 'Avanc√©', 'Expert'].includes(eventData.difficulty)
        ? eventData.difficulty
        : 'D√©butant',
      networking: ['Faible', 'Mod√©r√©', '√âlev√©', 'Tr√®s √©lev√©'].includes(eventData.networking)
        ? eventData.networking
        : 'Mod√©r√©'
    };

    console.log('‚úÖ Donn√©es valid√©es et nettoy√©es');
    console.log(`üìä √âv√©nement g√©n√©r√©: "${eventData.title}"`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    // Retourner les donn√©es g√©n√©r√©es
    res.json(eventData);

  } catch (error) {
    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.error('‚ùå ERREUR LORS DE LA G√âN√âRATION IA');
    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.error('Message:', error.message);
    console.error('Stack:', error.stack);
    console.error('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');
    
    res.status(500).json({ 
      error: 'Erreur serveur lors de la g√©n√©ration',
      details: error.message 
    });
  }
});

export default router;